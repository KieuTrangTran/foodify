#spring.datasource.url=jdbc:postgresql://dpg-cl13ue2s1bgc73edamf0-a.frankfurt-postgres.render.com:5432/foodify_db
spring.datasource.url=${DATASOURCE_URL}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
#spring.datasource.render.maximum-pool-size=5
spring.jpa.show-sql=true
spring.datasource.driverClassName=org.postgresql.Driver
#spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

## Username und Passwort nicht eintragen als Klartext
## Mit Umgebungsvariablen -> Lebt nur auf meinem Computer
## DemoApplication (neu auführen button, edit configuration, modify options, environmental variables, bearbeiten, DATASOURCE_PASSWORD = *passwort*, gleiche für Username und wohl URL (jdbc:h2:file:/Users/*wo die lokale Datenbank liegt (oder Name geben und erstellen?)) - Tipp: Ins Webtech Projekt rein, damit keine Verwirrung entsteht
## Datenbank wird NUR lokal auf dem Rechner erzeugt. Jedes Teammitglied hat eine eigene Datenbank
## Cloud Datenbank sinnvoller
## Bei der ersten Ausführung des Programms: Datenbank Datei wird im Ordner hinzugefügt
## ApplicationProperties: "h2 spring boot" Googlen Bealdung (für den Inhalt) oder Commit von Wider auf den Folien
## Commit von Wider als Hilfe verwenden
## Alles durchgehen, dann Anwendug starten (Tomcat startet on 8080, H2 console available at...)
## localhost:8080/db-console
## WARNUNG BEEP BEEP
## Wenn man sich vertippt hat bei den Umgebungsvariablen kommt nichts
## Nichts ist ungleich leerer Screen. Wenn man sich in der db-console einloggen will sagt es immer pw und username falsch
## FIX: Datenbank Datei löschen und nochmal anlegen
## Render.com über GitHub anmelden
## New -> postgresdb -> *Daten* -> Passwort, Username und external URL in application.properties
## URL muss wohl immer mit jdbc anfangen -> Database explorer -> Create Database -> User: username... host: hostname url: render.comd ding
## den jdbc link nehmen
## Bei der lokalen Datenbank kann weniger schiefgehen
## Render Deploy würde Zusatzpunkte geben
## Immer Pfade checken, Alles machen bevor testi testi, JPA Treiber wichtig
## Instanzvariablen von Objekten (bei ORM) werden zu den Spalten der Tabelle
## NoSQL Datenbanken (mongoDB) machen Dinge leichter (aber aktuell wohl noch nicht groß drin)
## @Enity Klassen. Für die werden Datenbank Objekte erstellt
## Thing -> Recepies
## @Id = Klasse is eine id
## @GeneratedValue = sollte generiert werden
## ID nicht im KOnstruktor
## Für jede Entitätklasse ein Repository erstellen
## Brauchen Docker für das Deployment auf render.com (bekommen wir gezeigt 8 Zeilen)